rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasCollaboratorAccess() {
      return isAuthenticated()
        && resource != null
        && resource.data.sharedWithUserIds != null
        && request.auth.uid in resource.data.sharedWithUserIds;
    }

    // Users collection - users can only read/write their own document
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);

      // Notes subcollection - users can only access their own notes
      match /notes/{noteId} {
        allow read: if isOwner(userId) || hasCollaboratorAccess();
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) || hasCollaboratorAccess();
        allow delete: if isOwner(userId);
      }

      // Labels subcollection - users can only access their own labels
      match /labels/{labelId} {
        allow read, write: if isOwner(userId);
      }

      // Reminders subcollection - users can only access their own reminders
      match /reminders/{reminderId} {
        allow read, write: if isOwner(userId);
      }

      // Any other subcollections under users
      match /{document=**} {
        allow read, write: if isOwner(userId);
      }
    }

    // Collection group queries for notes (for shared notes)
    match /{path=**}/notes/{noteId} {
      allow read: if isAuthenticated()
        && resource != null
        && (resource.data.userId == request.auth.uid
            || (resource.data.sharedWithUserIds != null
                && request.auth.uid in resource.data.sharedWithUserIds));
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated()
        && resource != null
        && (resource.data.userId == request.auth.uid
            || (resource.data.sharedWithUserIds != null
                && request.auth.uid in resource.data.sharedWithUserIds));
      allow delete: if isAuthenticated()
        && resource != null
        && resource.data.userId == request.auth.uid;
    }

    // Collection group queries for reminders
    match /{path=**}/reminders/{reminderId} {
      allow read: if isAuthenticated()
        && resource != null
        && resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid;
    }

    // Public feedback collection
    match /feedback/{feedbackId} {
      allow read: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if isAuthenticated()
        && resource != null
        && resource.data.userId != null
        && resource.data.userId == request.auth.uid;
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
